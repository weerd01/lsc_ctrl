#!/usr/bin/env python3

# Tasmota Lightning Control (tlc)
# (c) 2020 Ddw (GPL when released)

import time
import sys
import requests
import argparse
from random import randint
import configuration as cfg 
import webcall as web

def main():
  
    if args.state == 'on':

        if args.rise:
            lights_rise(args.rise, args.dim)

        elif args.col:
            setcol(args.col, args.dim)

        elif args.ct:
            setct(args.ct, args.dim)

        elif args.christmas:
            christmas(args.dim)

        else:
            lights_on(args.dim)
    else:
        lights_off()


    sys.exit() 

# LIGHTS ON function: 

def lights_on(dim_value):
    for _ in spot_list:
        print("Turn on", _)
        r = requests.get(web.call("method") + _ + web.call("spot_on"))
        r = requests.get(web.call("method") +  _ + web.call("dimmer") + str(dim_value))
    return        

# LIGHTS OFF function:

def lights_off():
    for _ in spot_list:
        print("off", _)
        r  = requests.get(web.call("method") + _ + web.call("spot_off"))
    return


# The rest of the functions are for effects :)


def christmas(dim_max):
  print('Time for christmas?')

  print(dim_max)

  for _ in spot_list:
    rnd_col = randint(1,15)
    r = requests.get(web.call("method") +  _ + web.call("color") + str(rnd_col))
    r = requests.get(web.call("method") +  _ + web.call("dimmer") + str(dim_max))

def lights_rise(speed, dim_max):
 
    if speed == 'slow':
        n = 1
    else:
        n = 5

    print("dimmer up", n)

    for _ in spot_list:
        for dim_value in range(0, int(dim_max), n):
            r = requests.get('http://' +  _ + web.call("dimmer") + str(dim_value))


def setcol(color_value, dim_value):
    print("set color")
    for _ in spot_list:
            r = requests.get(web.call("method") +  _ + web.call("color") + str(color_value))
            r = requests.get(web.call("method") +  _ + web.call("dimmer") + str(dim_value))

def setct(ct_value, dim_value):
    print("Set color temperature")
    for _ in spot_list:
            r = requests.get(web.call("method") +  _ + web.call("color_temp") + str(ct_value))
            r = requests.get(web.call("method") +  _ + web.call("dimmer") + str(dim_value))

def set_fade(fade_value):
    if fade_value == 'on':
      for _ in spot_list:
            r = requests.get(web.call("method") +  _ + web.call("fade_on"))
            print(r)
    elif fade_value == 'off':
      for _ in spot_list:
            r = requests.get(web.call("method") +  _ + web.call("fade_off"))
            print(r)
    else:
            print('No on or off specified.')

    sys.exit()

def set_poweronstate(poweronstate_value):
    print(poweronstate_value)

    if poweronstate_value == 'on':
      for _ in spot_list:
          r = requests.get(web.call("method") +  _ + web.call("powerstate_on"))
          print(r)
    elif poweronstate_value == 'off':
      for _ in spot_list:
          r = requests.get(web.call("method") +  _ + web.call("powerstate_off"))
          print(r)
    elif poweronstate_value == 'laststate':
      for _ in spot_list:
          r = requests.get(web.call("method") +  _ + web.call("powerstate_laststate"))
          print(r)

    sys.exit()

# Turns on/off the powercycle detection of your bulbs. Turning it OFF is dangerous!

def set_powercycle_detection(powercycle_detection_value):

    print(powercycle_detection_value)

    if powercycle_detection_value == 'on':
      for _ in spot_list:
          r = requests.get(web.call("method") +  _ + web.call("powercycle_detection_on"))
          print(r)
    elif powercycle_detection_value == 'off':
      for _ in spot_list:
          r = requests.get(web.call("method") +  _ + web.call("powercycle_detection_off"))
          print(r)
      
    sys.exit()

def getgroups():

    print('Available device groups: ')

    groups = cfg.get_groups()

    for c, _ in enumerate(groups):
      print(str(c+1) + ": ", _)
    
    sys.exit()

def process_args():

    # Parse arguments and set sane defaults if any parameters are missing.

    global args
    global spot_list

    parser=argparse.ArgumentParser(description='tlc - controlling tasmota bulbs')

    parser.add_argument('--group', type = str, help="Specify which group you want control!")
    parser.add_argument('--state', type = str, help="'on' and 'off' are supported.")
    parser.add_argument('--rgb', type = str, help="Add start RGB value")
    parser.add_argument('--dim', type = str, help="Add dim value")
    parser.add_argument('--rise', type = str, help="Slowly turn on lights")
    parser.add_argument('--col', type = str, help="Set color 0-15")
    parser.add_argument('--ct', type = str, help="Set color temperature 153-500.")
    parser.add_argument('--poweronstate', type = str, help="Set default power on state: on, off or laststate")
    parser.add_argument('--powercycle_detection', type = str, help="DANGEROUS: on = 0 = detection is ACTIVE. off = 1 = detection is INACTIVE. You usually want to 0 to be able to ever reset the tasmota configuration!")
    parser.add_argument('--christmas', help="Pick a random color for each lamp at max dim!", action="store_true")
    parser.add_argument('--fade', type = str, help="Turn fading 'on' or 'off'.")
    parser.add_argument('--getgroups', help="Show available groups", action="store_true")

    # show help if no command line arguments have been supplied:

    if len(sys.argv) == 1:
      parser.print_help(sys.stderr)
      sys.exit(1)

    # This is where the actual parsing happens:

    args=parser.parse_args()

    # spot_list is a global list containing all IP addresses of the devices that will be controlled during 
    # the runtime of tlc. 

    spot_list = cfg.get_group_ipaddr(args.group)

    if args.getgroups:
      getgroups()

    # set and forget option to enable/disable smooth fade in/out of the lights:

    if args.fade:
      set_fade(args.fade)

    if args.poweronstate:
      set_poweronstate(args.poweronstate)

    if args.powercycle_detection:
      set_powercycle_detection(args.powercycle_detection)

    if not args.group:
      print ('You must specify a group using: --group')
      sys.exit()

    if not spot_list:
      print('No spots found in group: ' + args.group + '. Dit you specify to correct group?')
      print()
      print('Pro tips:')
      print()
      print(' - use --getgroups to view available groups')
      print(' - edit devices.yaml to define your devices and groups!')
    
      sys.exit(1)


process_args()
main()

