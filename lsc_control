#!/usr/bin/env python3

import time
import sys
import requests
import argparse
import configuration as cfg 

#groups = cfg.get_groups()

#group = 'aanrecht'
 
#group_ip = cfg.get_group_ipaddr('aanrecht')
#print(group_ip)

#ip = cfg.get_group_ipaddr()

#print(groups)

def main():
  
    if args.dim == None:
        args.dim = 100

    if args.state == 'on':

        if args.rise == 'fast':
            lights_rise("fast", args.dim)

        elif args.rise == 'slow':
            lights_rise("slow", args.dim)

        elif args.setcol:
            setcol(args.setcol, args.dim)

        elif args.ct:
            setct(args.ct, args.dim)

        else:
            lights_on(args.dim)
    else:
        lights_off()

    print(args)

    sys.exit() 

#spot_list =  cfg.get_group_ipaddr(args.group)

spot_on = "/cm?cmnd=Power%20On"
spot_off = "/cm?cmnd=Power%20Off"

dimmer = "/cm?cmnd=Dimmer%20"
color = "/cm?cmnd=Color%20"
color_temp = "/cm?cmnd=CT%20"

def lights_on(dim_value):
    for _ in spot_list:
        print("on", _)
        r  = requests.get('http://' + _ + spot_on)
        r  = requests.get('http://' +  _ + dimmer + str(dim_value))
    return        

def lights_off():
    for _ in spot_list:
        print("off", _)
        r  = requests.get('http://' + _ + spot_off)
        r  = requests.get('http://' +  _ + dimmer + str(0))
    return

def lights_rise(speed, dim_max):
    if speed == 'slow':
        n = 1
    else:
        n = 5

    print("dimmer up", n)
    for _ in spot_list:
        for dim_value in range(0, dim_max+10, n):
            r = requests.get('http://' +  _ + dimmer + str(dim_value))

def setcol(color_value, dim_value):
    print("set color")
    for _ in spot_list:
            r = requests.get('http://' +  _ + color + str(color_value))
            r = requests.get('http://' +  _ + dimmer + str(dim_value))

def setct(ct_value, dim_value):
    print("Set color temperature")
    for _ in spot_list:
            r = requests.get('http://' +  _ + color_temp + str(ct_value))
            r = requests.get('http://' +  _ + dimmer + str(dim_value))

def getgroups():

    print('Available device groups: ')

    groups = cfg.get_groups()

    for c, _ in enumerate(groups):
      print(str(c+1) + ": ", _)
    
    sys.exit()

def process_args():

    global args
    global spot_list

    parser=argparse.ArgumentParser(description='lsc_ctrl - controlling LSC bulbs')

    parser.add_argument('--group', type = str, help="Specify which group you want control!")
    parser.add_argument('--state', type = str, help="'on' and 'off' are supported.")
    parser.add_argument('--rgb', type = str, help="Add start RGB value")
    parser.add_argument('--dim', type = str, help="Add dim value")
    parser.add_argument('--rise', type = str, help="Slowly turn on lights")
    parser.add_argument('--setcol', type = str, help="Set color 0-15")
    parser.add_argument('--ct', type = str, help="Set color temperature 153-500")
    parser.add_argument('--getgroups', help="Show available groups", action="store_true")

    if len(sys.argv) == 1:
      parser.print_help(sys.stderr)
      sys.exit(1)

    args=parser.parse_args()

    spot_list = cfg.get_group_ipaddr(args.group)

    if args.getgroups:
      getgroups()

    if not args.group:
      print ('You must specify a group using: --group')
      sys.exit()
    
    if not spot_list:
      print('No spots found in group: ' + args.group + '. Dit you specify to correct group?')
      print()
      print('Pro tips:')
      print()
      print(' - use --getgroups to view available groups')
      print(' - edit devices.yaml to define your devices and groups!')
    
      sys.exit(1)
    else:
      print(spot_list)
      sys.exit()

process_args()
main()

